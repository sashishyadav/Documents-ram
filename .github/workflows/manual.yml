name: Deploy WordPress with LEMP and SSL

on:
  push:
    branches:
      - main
      
env:
  PARAMETER_NAME: "test-key"
  INSTANCE_ID: "i-07aef1121d6082521" 
  AWS_REGION: "eu-north-1"
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Get and log public IP address
        run: |
          echo "Fetching the public IP address of the runner..."
          PUBLIC_IP=$(curl -s ifconfig.me)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Retrieve first security group ID
        id: get-sg
        run: |
          INSTANCE_ID=${{ env.INSTANCE_ID }}
          SECURITY_GROUP_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].SecurityGroups[0].GroupId" --output text)
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
          EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

      - name: Update security group to allow SSH from runner IP
        run: |
          SECURITY_GROUP_ID=${{ env.SECURITY_GROUP_ID }}
          PUBLIC_IP=${{ env.PUBLIC_IP }}
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32
          
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${{ env.VPC_NAME }}" --query "Vpcs[*].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          
      - name: Retrieve .pem file from SSM Parameter Store
        id: get-pem
        run: |
          PARAMETER_NAME=${{ env.PARAMETER_NAME }}
          PEM_CONTENT=$(aws ssm get-parameter --name $PARAMETER_NAME --with-decryption --query "Parameter.Value" --output text)
          echo "$PEM_CONTENT" > private_key
          chmod 400 private_key
          echo "PEM_FILE_PATH=private_key" >> $GITHUB_ENV

      - name: SSH and install tools
        env:
          PEM_FILE_PATH: ${{ env.PEM_FILE_PATH }}
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.EC2_PUBLIC_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $PEM_FILE_PATH $SSH_USER@$SSH_HOST << 'EOF'
            # AWS CLI
            sudo apt update -y \
            && sudo apt upgrade -y \
            && sudo apt install -y nginx mysql-server php-fpm php-mysql expect

            # Use expect script to automate mysql_secure_installation
            expect << 'END_EXPECT'
              spawn sudo mysql_secure_installation
              expect "Press y|Y for Yes, any other key for No:" { send "y\r" }
              expect "Please enter 0 = LOW, 1 = MEDIUM and 2 = STRONG:" { send "2\r" }
              expect "Change the password for root? (Press y|Y for Yes, any other key for No) :" { send "y\r" }
              expect "Remove anonymous users? (Press y|Y for Yes, any other key for No) :" { send "y\r" }
              expect "Disallow root login remotely? (Press y|Y for Yes, any other key for No) :" { send "y\r" }
              expect "Remove test database and access to it? (Press y|Y for Yes, any other key for No) :" { send "y\r" }
              expect "Reload privilege tables now? (Press y|Y for Yes, any other key for No) :" { send "y\r" }
              expect eof
            END_EXPECT
      
          EOF

      - name: Remove SSH access from runner IP
        run: |
          SECURITY_GROUP_ID=${{ env.SECURITY_GROUP_ID }}
          PUBLIC_IP=${{ env.PUBLIC_IP }}
          aws ec2 revoke-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32


    
      # # Step 2: Set up the server using LEMP stack
      # - name: Install LEMP and WordPress on Server
      #   run: |
      #     sudo apt update
      #     sshpass -p "${{ secrets.SERVER_PASSWORD }}" ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} bash -s <<'EOF'
      #       # Update packages and install LEMP stack
      #       sudo apt update && sudo apt upgrade -y
      #       sudo apt install nginx mysql-server php-fpm php-mysql -y

      #       # Secure MySQL installation
      #       sudo mysql_secure_installation <<MYSQL_INPUT
      #       n
      #       y
      #       y
      #       y
      #       y
      #       MYSQL_INPUT

      #       # Create WordPress database and user
      #       sudo mysql -e "CREATE DATABASE wordpress_db;"
      #       sudo mysql -e "CREATE USER 'wordpress_user'@'localhost' IDENTIFIED BY 'strong_password';"
      #       sudo mysql -e "GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress_user'@'localhost';"
      #       sudo mysql -e "FLUSH PRIVILEGES;"

      #       # Download and set up WordPress
      #       wget https://wordpress.org/latest.tar.gz
      #       tar -xvzf latest.tar.gz
      #       sudo mv wordpress /var/www/html/
      #       sudo chown -R www-data:www-data /var/www/html/wordpress
      #       sudo chmod -R 755 /var/www/html/wordpress

      #       # Configure WordPress
      #       sudo cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
      #       sudo sed -i "s/database_name_here/wordpress_db/" /var/www/html/wordpress/wp-config.php
      #       sudo sed -i "s/username_here/wordpress_user/" /var/www/html/wordpress/wp-config.php
      #       sudo sed -i "s/password_here/strong_password/" /var/www/html/wordpress/wp-config.php

      #       # Enable caching and gzip in Nginx
      #       sudo tee /etc/nginx/conf.d/wordpress.conf > /dev/null <<NGINX
      #       server {
      #                 listen 80;
      #                 server_name _;
      #                 root /var/www/html/wordpress;

      #                 index index.php index.html index.htm;

      #                location / {
      #                try_files \$uri \$uri/ /index.php?q=\$uri&\$args;
      #                }

      #               location ~ \.php\$ {
      #               include snippets/fastcgi-php.conf;
      #               fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
      #               fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
      #               include fastcgi_params;
      #               }

      #     # Enable gzip
      #        gzip on;
      #        gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss text/javascript;

      #     # Enable caching
      #       location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)$ {
      #       expires 6M;
      #       access_log off;
      #       }
      #       }
      #       NGINX
      #       sudo nginx -t
      #       sudo systemctl restart nginx

      #       # Install Certbot for SSL
      #       sudo apt install certbot python3-certbot-nginx -y
      #       sudo certbot --nginx -n --agree-tos --email admin@example.com --redirect -d yourdomain.com
      #     EOF env:
      #     SERVER_PASSWORD: ${{ secrets.SERVER_PASSWORD }}
      #     SERVER_USER: ${{ secrets.SERVER_USER }}
      #     SERVER_IP: ${{ secrets.SERVER_IP }}

      #     # Step 3: Verify the deployment 
      #     - name: Verify Deployment
      #       run: curl -I http://${{ secrets.SERVER_IP }} 

