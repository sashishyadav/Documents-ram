name: Deploy WordPress with LEMP and SSL

on:
  push:
    branches:
      - main
      
env:
  PARAMETER_NAME: "test-key"
  INSTANCE_ID: "i-0716fab40cbd90904" 
  AWS_REGION: "eu-north-1"
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Get and log public IP address
        run: |
          echo "Fetching the public IP address of the runner..."
          PUBLIC_IP=$(curl -s ifconfig.me)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1

      - name: Retrieve first security group ID
        id: get-sg
        run: |
          INSTANCE_ID=${{ env.INSTANCE_ID }}
          SECURITY_GROUP_ID=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].SecurityGroups[0].GroupId" --output text)
          echo "SECURITY_GROUP_ID=$SECURITY_GROUP_ID" >> $GITHUB_ENV
          EC2_PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "EC2_PUBLIC_IP=$EC2_PUBLIC_IP" >> $GITHUB_ENV

      - name: Update security group to allow SSH from runner IP
        run: |
          SECURITY_GROUP_ID=${{ env.SECURITY_GROUP_ID }}
          PUBLIC_IP=${{ env.PUBLIC_IP }}
          aws ec2 authorize-security-group-ingress --group-id $SECURITY_GROUP_ID --protocol tcp --port 22 --cidr $PUBLIC_IP/32
          
          VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=${{ env.VPC_NAME }}" --query "Vpcs[*].VpcId" --output text)
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          
      - name: Retrieve .pem file from SSM Parameter Store
        id: get-pem
        run: |
          PARAMETER_NAME=${{ env.PARAMETER_NAME }}
          PEM_CONTENT=$(aws ssm get-parameter --name $PARAMETER_NAME --with-decryption --query "Parameter.Value" --output text)
          echo "$PEM_CONTENT" > private_key
          chmod 400 private_key
          echo "PEM_FILE_PATH=private_key" >> $GITHUB_ENV

      - name: SSH and install tools
        env:
          PEM_FILE_PATH: ${{ env.PEM_FILE_PATH }}
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.EC2_PUBLIC_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $PEM_FILE_PATH $SSH_USER@$SSH_HOST << 'EOF'
            sudo apt update -y && sudo apt upgrade -y
            sudo apt install -y nginx mysql-server software-properties-common
           # sudo add-apt-repository -y ppa:ondrej/php
            sudo apt-get install -y php8.1 php8.1-gd php8.1-mysql php8.1-zip
            sudo apt-get install -y php8.1-fpm
          EOF
        
      - name: SSH and mysql
        env:
          PEM_FILE_PATH: ${{ env.PEM_FILE_PATH }}
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.EC2_PUBLIC_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $PEM_FILE_PATH $SSH_USER@$SSH_HOST << 'EOF'
            sudo mysql -u root -p"${{ secrets.MYSQL_ROOT_PASSWORD }}" -e "
              DROP DATABASE IF EXISTS wordpress_db;
              DROP USER IF EXISTS 'wordpress_user'@'localhost';
              CREATE DATABASE wordpress_db;
              CREATE USER 'wordpress_user'@'localhost' IDENTIFIED BY '${{ secrets.MYSQL_ROOT_PASSWORD }}';
              GRANT ALL PRIVILEGES ON wordpress_db.* TO 'wordpress_user'@'localhost';
              FLUSH PRIVILEGES;
            "
          EOF
    

      - name: SSH and install WordPress
        env:
          PEM_FILE_PATH: ${{ env.PEM_FILE_PATH }}
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.EC2_PUBLIC_IP }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $PEM_FILE_PATH $SSH_USER@$SSH_HOST << EOF
            # Install WordPress
            cd /var/www/html
            sudo wget https://wordpress.org/latest.tar.gz
            sudo tar -xvzf latest.tar.gz
            sudo mv wordpress /var/www/html/
            sudo chown -R www-data:www-data /var/www/html/wordpress
            sudo chmod -R 755 /var/www/html/wordpress
      
            # Configure WordPress
            sudo cp /var/www/html/wordpress/wp-config-sample.php /var/www/html/wordpress/wp-config.php
            sudo sed -i "s/database_name_here/wordpress_db/" /var/www/html/wordpress/wp-config.php
            sudo sed -i "s/username_here/wordpress_user/" /var/www/html/wordpress/wp-config.php
            sudo sed -i "s/password_here/${{ secrets.MYSQL_ROOT_PASSWORD }}/" /var/www/html/wordpress/wp-config.php
      
           
          # Configure Nginx
          sudo tee /etc/nginx/sites-enabled/wordpress > /dev/null <<EOL
          server {
              listen 80;
              server_name brainstormforce.servequake.com;
              root /var/www/html/wordpress;
          
              index index.php index.html index.htm index.nginx-debian.html;
          
              location / {
                  try_files \$uri \$uri/ /index.php?\$args;
              }
          
              location ~ \.php\$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.1-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$document_root/\$fastcgi_script_name;
                  include fastcgi_params;
              }
          
              # Enable gzip compression
              gzip on;
              gzip_types text/plain text/css application/json application/javascript text/xml application/xml+rss text/javascript;
          
              # Enable caching for static files
              location ~* \.(jpg|jpeg|png|gif|ico|css|js|svg|woff|woff2|ttf|eot)\$ {
                  expires 6M;
                  access_log off;
              }
          
              access_log /var/log/nginx/nginx.vhost.access.log;
              error_log /var/log/nginx/nginx.vhost.error.log;
          }
          EOL
          EOF
       
      - name: SSH and SSL
        env:
          PEM_FILE_PATH: ${{ env.PEM_FILE_PATH }}
          SSH_USER: ubuntu
          SSH_HOST: ${{ env.EC2_PUBLIC_IP }}
        run: |
          ssh -o StrictHostKeyChecking=no -i $PEM_FILE_PATH $SSH_USER@$SSH_HOST << 'EOF'      
              sudo systemctl restart nginx
              sudo systemctl reload nginx
              sudo apt install certbot python3-certbot-nginx -y
              sudo certbot --nginx -n --agree-tos --email sashish0377@gmail.com --redirect -d brainstormforce.servequake.com
          EOF    

      #       # Install Certbot for SSL
      #       sudo apt install certbot python3-certbot-nginx -y
      #       sudo certbot --nginx -n --agree-tos --email admin@example.com --redirect -d yourdomain.com
      #     EOF env:
      

      #     # Step 3: Verify the deployment 
      #     - name: Verify Deployment
      #       run: curl -I http://${{ secrets.SERVER_IP }} 

